//
// Generated file, do not edit! Created by nedtool 4.6 from statusFrame.msg.
//

#ifndef _STATUSFRAME_M_H_
#define _STATUSFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>statusFrame.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet StatusFrame
 * {
 *     int senderId;				// Id of node broadcasting this message
 *     double energyRemaining;		// Sending node's residual energy level
 *     double qEValue;				// Sending node's most up to date QE-Value
 *     double qBValue;				// Sending node's most up to date QB-Value
 *     double numTxToBaseStation;		// Sending node's best case estimated average number of transmission to reach base station
 *     int numHopsToBaseStation;	// Sending node's best known hop distance to base station
 * }
 * </pre>
 */
class StatusFrame : public ::cPacket
{
  protected:
    int senderId_var;
    double energyRemaining_var;
    double qEValue_var;
    double qBValue_var;
    double numTxToBaseStation_var;
    int numHopsToBaseStation_var;

  private:
    void copy(const StatusFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StatusFrame&);

  public:
    StatusFrame(const char *name=NULL, int kind=0);
    StatusFrame(const StatusFrame& other);
    virtual ~StatusFrame();
    StatusFrame& operator=(const StatusFrame& other);
    virtual StatusFrame *dup() const {return new StatusFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
    virtual double getEnergyRemaining() const;
    virtual void setEnergyRemaining(double energyRemaining);
    virtual double getQEValue() const;
    virtual void setQEValue(double qEValue);
    virtual double getQBValue() const;
    virtual void setQBValue(double qBValue);
    virtual double getNumTxToBaseStation() const;
    virtual void setNumTxToBaseStation(double numTxToBaseStation);
    virtual int getNumHopsToBaseStation() const;
    virtual void setNumHopsToBaseStation(int numHopsToBaseStation);
};

inline void doPacking(cCommBuffer *b, StatusFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, StatusFrame& obj) {obj.parsimUnpack(b);}


#endif // ifndef _STATUSFRAME_M_H_

