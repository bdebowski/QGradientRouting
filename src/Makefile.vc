#
# OMNeT++/OMNEST Makefile for IntelligentRouting
#
# This file was generated with the command:
#  opp_makemake -f --nmake --deep
#

# Name of target to be created (-o option)
TARGET = IntelligentRouting.exe

# User interface (uncomment one) (-u option)
USERIF_LIBS = $(ALL_ENV_LIBS) # that is, $(TKENV_LIBS) $(CMDENV_LIBS)
#USERIF_LIBS = $(CMDENV_LIBS)
#USERIF_LIBS = $(TKENV_LIBS)

# C++ include paths (with -I)
INCLUDE_PATH = -I.

# Additional object and library files to link with
EXTRA_OBJS =

# Additional libraries (-L, -l options)
LIBS =

# Output directory
PROJECT_OUTPUT_DIR = ../out
PROJECTRELATIVE_PATH = src
O = $(PROJECT_OUTPUT_DIR)/$(CONFIGNAME)/$(PROJECTRELATIVE_PATH)

# Object files for local .cc and .msg files
OBJS = \
    $O/applicationLayer.obj \
    $O/dataLinkLayer.obj \
    $O/networkLayer.obj \
    $O/physicalLayer.obj \
    $O/ackFrame_m.obj \
    $O/dataFrame_m.obj \
    $O/statusFrame_m.obj

# Message files
MSGFILES = \
    ackFrame.msg \
    dataFrame.msg \
    statusFrame.msg

MAKE=nmake -nologo -f Makefile.vc

#------------------------------------------------------------------------------

# Pull in OMNeT++ configuration (Makefile.inc or configuser.vc)
!if "$(OMNETPP_CONFIGFILE)"!=""
CONFIGFILE = $(OMNETPP_CONFIGFILE)
!elseif "$(OMNETPP_ROOT)"!=""
CONFIGFILE = $(OMNETPP_ROOT)/configuser.vc
!else
CONFIGFILE = C:\omnetpp-4.6\\configuser.vc
!endif

!if !exist($(CONFIGFILE))
!error '$(CONFIGFILE)' does not exist -- set OMNETPP_ROOT or OMNETPP_CONFIGFILE to point to configuser.vc. From the IDE, set the OMNeT++ install location on the Window | Preferences dialog.
!endif

!include $(CONFIGFILE)

# Simulation kernel and user interface libraries
OMNETPP_LIB_SUBDIR = $(OMNETPP_LIB_DIR)/$(TOOLCHAIN_NAME)
OMNETPP_LIBS = /libpath:"$(OMNETPP_LIB_SUBDIR)" /libpath:"$(OMNETPP_LIB_DIR)" oppmain$D.lib $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS = $(CFLAGS)  $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
MSGCOPTS = $(INCLUDE_PATH)

#------------------------------------------------------------------------------
# User-supplied makefile fragment(s)
# >>>
# <<<
#------------------------------------------------------------------------------

# Main target
all: $O/$(TARGET)
	$(Q)copy $(O:/=\)\$(TARGET) . >NUL
	-$(Q)copy $(O:/=\)\$(TARGET).manifest . >NUL

$O/$(TARGET): $(OBJS)  $(EXTRA_OBJS) Makefile.vc
	-@md $(O:/=\) 2>nul
	@echo Creating executable: $@
	$(Q)$(LINK) $(LDFLAGS) /out:$O/$(TARGET)  $(OBJS) $(EXTRA_OBJS) $(AS_NEEDED_OFF) $(WHOLE_ARCHIVE_ON) $(LIBS) $(WHOLE_ARCHIVE_OFF) $(OMNETPP_LIBS)

.SUFFIXES: .cc

{.}.cc{$O}.obj:
	-@md $(O:/=\) 2>nul
	$(Q)$(CXX) -c $(CXXFLAGS) $(COPTS) /Fo"$@" -Tp $<

{.}.cc{$O/.}.obj:
	-@md $(O:/=\)\. 2>nul
	$(Q)$(CXX) -c $(CXXFLAGS) $(COPTS) /Fo"$@" -Tp $<

ackFrame_m.cc ackFrame_m.h : ackFrame.msg
	$(qecho) MSGC: $@
	$(Q)$(MSGC:/=\) -s _m.cc $(MSGCOPTS) ackFrame.msg

dataFrame_m.cc dataFrame_m.h : dataFrame.msg
	$(qecho) MSGC: $@
	$(Q)$(MSGC:/=\) -s _m.cc $(MSGCOPTS) dataFrame.msg

statusFrame_m.cc statusFrame_m.h : statusFrame.msg
	$(qecho) MSGC: $@
	$(Q)$(MSGC:/=\) -s _m.cc $(MSGCOPTS) statusFrame.msg

msgheaders: $(MSGFILES:.msg=_m.h)

clean:
	$(qecho) Cleaning...
	-$(Q)rmdir /s /q $(O:/=\) 2>nul
	-$(Q)del $(VC_AUX_FILES) 2>nul
	-$(Q)del $(TARGET) $(TARGET:.exe=.lib) $(TARGET:.exe=.dll) 2>nul
	-$(Q)del .\*_m.cc .\*_m.h 2>nul

cleanall: clean
	-$(Q)rmdir /s /q $(PROJECT_OUTPUT_DIR:/=\) 2>nul

depend:
	$(qecho) Creating dependencies...
	$(Q)$(MAKEDEPEND) $(INCLUDE_PATH) -f Makefile.vc -P^$O/ -- $(MSG_CC_FILES)  ./*.cc

# DO NOT DELETE THIS LINE -- make depend depends on it.
$O/ackFrame_m.obj: ackFrame_m.cc \
	ackFrame_m.h
$O/applicationLayer.obj: applicationLayer.cc \
	applicationLayer.h
$O/dataFrame_m.obj: dataFrame_m.cc \
	dataFrame_m.h
$O/dataLinkLayer.obj: dataLinkLayer.cc \
	Definitions.h \
	ackFrame_m.h \
	dataFrame_m.h \
	dataLinkLayer.h \
	networkLayer.h \
	physicalLayer.h \
	statusFrame_m.h
$O/networkLayer.obj: networkLayer.cc \
	Definitions.h \
	ackFrame_m.h \
	applicationLayer.h \
	dataFrame_m.h \
	dataLinkLayer.h \
	networkLayer.h \
	physicalLayer.h \
	statusFrame_m.h
$O/physicalLayer.obj: physicalLayer.cc \
	Definitions.h \
	ackFrame_m.h \
	dataFrame_m.h \
	dataLinkLayer.h \
	physicalLayer.h
$O/statusFrame_m.obj: statusFrame_m.cc \
	statusFrame_m.h

