//
// Generated file, do not edit! Created by nedtool 4.6 from ackFrame.msg.
//

#ifndef _ACKFRAME_M_H_
#define _ACKFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>ackFrame.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet AckFrame
 * {
 *     int targetId;	// Id of node who's message we wish to ACK
 *     int senderId;	// Id of node broadcasting this ACK
 *     int msgToAckId;	// Id of message we wish to ACK
 * }
 * </pre>
 */
class AckFrame : public ::cPacket
{
  protected:
    int targetId_var;
    int senderId_var;
    int msgToAckId_var;

  private:
    void copy(const AckFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AckFrame&);

  public:
    AckFrame(const char *name=NULL, int kind=0);
    AckFrame(const AckFrame& other);
    virtual ~AckFrame();
    AckFrame& operator=(const AckFrame& other);
    virtual AckFrame *dup() const {return new AckFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getTargetId() const;
    virtual void setTargetId(int targetId);
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
    virtual int getMsgToAckId() const;
    virtual void setMsgToAckId(int msgToAckId);
};

inline void doPacking(cCommBuffer *b, AckFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AckFrame& obj) {obj.parsimUnpack(b);}


#endif // ifndef _ACKFRAME_M_H_

